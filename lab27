
#include <iostream>
#include <map>
#include <vector>

using namespace std;

using VillagerData = tuple<int, string, string>;

void printVillagers(const map<string, VillagerData>& villagers) {
  cout << "\nVillager details:\n";
  for (const auto& pair : villagers) {
      const string& name = pair.first;
      const auto& [friendship, species, catchphrase] = pair.second;
      cout << name << " [" << friendship << ", " << species << ", " << catchphrase << "]" << endl;
  }
}

void addVillager(map<string, VillagerData>& villagers) {
  string name, species, catchphrase;
  int friendship;

  cout << "\nVillager name: "
  cin >> name;
  cout << "Friendship le vel (0-10): ";
  cin >> friendship;
  cout << "Species: ";
  cin >> species;
  cout << "Catchphrase: ";
  cin.ignore();
  getline(cin, catchphrase);

  villager[name] = make_tuple(friendship, species, catchphrase);
  cout << name << " added." << endl;
}

void deleteVillager(map<string, VillagerData>& villagers) {
  string name;
  cout << "\Enter villager name to delete: ";
  cin >> name;

  if (villager.erase(name)) {
    cout << name << " deleted." << endl;
  } else {
    cout << name << " not found." << endl;
  }
}

void increaseFriendship(map<string, VillagerData>& villagers) {
  string name;
  cout << "\nEnter villager name to increase friendship: ";
  cin >> name;

  auto it = villagers.find(name);
  if (it != villagers.end()) {
    int& friendship = get <0>(it->second);
    if (friendship < 10) ++friendship;
    cout << "Friendship level increased to " << friendship << "." << endl;
  } else {
    cout << name << " not found." << endl;
  }
}

void decreaseFriendship(map<string, VillagerData>& villagers) {
  string name;
  cout << "\nEnter villager name to decrease friendship: ";
  cin >> name;

  auto it = villagers.find(name);
  if (it != villagers.end()) {
    int& friendship = get <0>(it->second);
    if (friendship > 10) --friendship;
    cout << "Friendship level decreased to " << friendship << "." << endl;
  } else {
    cout << name << " not found." << endl;
  }
}

int main() {

  // declarations
  map<string, vector<string>> villagerColors;

  // insert elements into the map
  // note how the right-hand side of the assignment are the vector elements

  villagerColors["Audie"] = {"Orange", "Yellow", "Red"};
  villagerColors["Raymond"] = {"Black", "Gray", "White"};
  villagerColors.insert({"Marshal", {"Blue", "White", "Black"}});

  // access the map using a range-based for loop

  cout << "Villagers and their favorite colors (range-based for loop):" << endl;
  for (auto pair : villagerColors) {
    cout << pair.first << ": ";
    for (auto color : pair.second)
    cout << color << " ";
    cout << endl;
  }

// access the map using iterators

  cout << "\nVillagers and their favorite colors (iterators):" << endl;
  for (map<string, vector<string>>::iterator it = villagerColors.begin();
  it != villagerColors.end(); ++it) {
    cout << it->first << ": ";
    for (auto color : it->second) {
      cout << color << " ";
    }
    cout << endl;
  }

  // delete an element
  villagerColors.erase("Raymond");

  // search for an element using .find() to avoid errors
  string searchKey = "Audie";
  auto it = villagerColors.find(searchKey);
  if (it != villagerColors.end()) { // the iterator points to beyond the end of the map
    // if searchKey is not found

    cout << "\nFound " << searchKey << "'s favorite colors: ";
    for (auto color : it->second) // range loop to traverse the value/vector
      cout << color << " ";
    cout << endl;
  } else
      cout << endl << searchKey << " not found." << endl;

    // report size, clear, report size again to confirm map operations
    cout << "\nSize before clear: " << villagerColors.size() << endl;
    villagerColors.clear();
    cout << "Size after clear: " << villagerColors.size() << endl;
    
  return 0;
}
