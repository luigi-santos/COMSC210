
#include <iostream>
#include <map>
#include <vector>

using namespace std;

using VillagerData = tuple<int, string, string>;

void printVillagers(const map<string, VillagerData>& villagers) {
  cout << "\nVillager details:\n";
  for (const auto& pair : villagers) {
      const string& name = pair.first;
      const auto& [friendship, species, catchphrase] = pair.second;
      cout << name << " [" << friendship << ", " << species << ", " << catchphrase << "]" << endl;
  }
}

void addVillager(map<string, VillagerData>& villagers) {
  string name, species, catchphrase;
  int friendship;

  cout << "\nVillager name: "
  cin >> name;
  cout << "Friendship le vel (0-10): ";
  cin >> friendship;
  cout << "Species: ";
  cin >> species;
  cout << "Catchphrase: ";
  cin.ignore();
  getline(cin, catchphrase);

  villager[name] = make_tuple(friendship, species, catchphrase);
  cout << name << " added." << endl;
}

void deleteVillager(map<string, VillagerData>& villagers) {
  string name;
  cout << "\Enter villager name to delete: ";
  cin >> name;

  if (villager.erase(name)) {
    cout << name << " deleted." << endl;
  } else {
    cout << name << " not found." << endl;
  }
}

void increaseFriendship(map<string, VillagerData>& villagers) {
  string name;
  cout << "\nEnter villager name to increase friendship: ";
  cin >> name;

  auto it = villagers.find(name);
  if (it != villagers.end()) {
    int& friendship = get <0>(it->second);
    if (friendship < 10) ++friendship;
    cout << "Friendship level increased to " << friendship << "." << endl;
  } else {
    cout << name << " not found." << endl;
  }
}

void decreaseFriendship(map<string, VillagerData>& villagers) {
  string name;
  cout << "\nEnter villager name to decrease friendship: ";
  cin >> name;

  auto it = villagers.find(name);
  if (it != villagers.end()) {
    int& friendship = get <0>(it->second);
    if (friendship > 10) --friendship;
    cout << "Friendship level decreased to " << friendship << "." << endl;
  } else {
    cout << name << " not found." << endl;
  }
}

void searchVillager(map<string, VillagerData>& villagers) {
  string name;
  cout << "\nEnter villager name to search for: ";
  cin >> name;

  auto it = villagers.find(name);
  if (it != villagers.end()) {
    const auto& [friendship, species, catchphrase] = it->second;
    cout << "Found " << name << ": [" << friendship << ", " << species << ", " << catchphrase << "]" << endl;
  } else {
    cout << name << " not found." << endl;
  }
}

int main() {

  // declarations
  map<string, vector<string>> villagerColors;

  int choice;
  do {
    cout << "\nMenu:" << endl;
    cout << "1. Add Villager" << endl;
    cout << "2. Delete Villager" << endl;
    cout << "3. Increase Friendship" << endl;
    cout << "4. Decrease Friendship" << endl;
    cout << "5. Search for Villager" << endl;
    cout << "6. Exit" << endl;
    cout << "Enter Choice: ";
    cin >> choice;

    switch (choice) {
      case 1:
        addVillager(villagers);
        break;
      case 2:
        deleteVillager(villagers);
        break;
      case 3:
        increaseFriendship(villagers);
        break;
      case 4:
        decreaseFriendship(villagers);
        break;
      case 5:
        searchVillager(villagers);
        break;
      case 6:
        cout << "Exiting..." << endl;
        break;
      default:
        cout << "Error. Try again.";
    }

    printVillagers(villager);

  } while (choice != 6);

  return 0;
}
