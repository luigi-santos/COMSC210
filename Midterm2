#include <iostream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <ctime>

using namespace std;


class DoublyLinkedList {
private:
    struct Node {
        string data;
        Node* prev;
        Node* next;
        Node(const string& val, Node* p = nullptr, Node* n = nullptr) {
            data = val; 
            prev = p;
            next = n;
        }
    };

    Node* head;
    Node* tail;

public:
    DoublyLinkedList() { 
        head = nullptr; 
        tail = nullptr; 
    }

    void push_back(const string& value) {
        Node* newNode = new Node(value);
        if (!tail)
            head = tail = newNode;
        else {
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
    }
    
    
    void pop_front() {

        if (!head) {
            return;
        }

        Node * temp = head;

        if (head != tail) {
            head = head->next;
            head->prev = nullptr;
        }
        else
            head = tail = nullptr;
        delete temp;
    }

    void pop_back() {
        if (!tail) {
            return;
        }
        Node * temp = tail;

        if (head != tail) {
            tail = tail->prev;
            tail->next = nullptr;
        }
        else
            head = tail = nullptr;
        delete temp;
    }

    bool is_empty() const {
        return head == nullptr;
    }

    string front() const {
         return head ? head->data : "";
    }

    string back() const {
        return tail ? tail->data : "";
    }

     void print() const {
        Node* current = head;
        if (!current) {
            cout << "List is empty." << endl;
            return;
        }
        while (current) {
            cout << current->data << " ";
            current = current->next;
        }
        cout << endl;
    }

    ~DoublyLinkedList() {
        while (!is_empty()) {
            pop_front();
        }
    }
};   

DoublyLinkedList load_names(const string& filename) {
    DoublyLinkedList names;
    ifstream file(filename);
    string name; 
    while (getline(file, name)) {
        names.push_back(name);
    }
    return names;
}

int main() {
    srand(static_cast<unsigned int>(time(0)));
    DoublyLinkedList names = load_names(names.txt);
    DoublyLinkedList line;

    cout << "Store Opens: " << endl;
    for (int i = 0; i < 5 && !names.is_empty(); ++i) {
        string customer = names.front();
        line.push_back(customer);
        cout << "   " << customer << " joined the list" << endl;
        names.pop_front();
    }

    for (int time_period = 1; time_period <= 20; ++time_period) {
        cout << "Time step #" << time_period << ":" << endl;

        if (!line.is_empty() && (rand() % 100 < 40)) {
            string customer = names.front();
            line.push_back(customer);
            cout << "   " << customer << " joined the line" << endl;
            names.pop_front();
        }

        if (!names.is_empty() && (rand() % 100 < 60)) {
            string customer = names.front();
            line.push_back(customer);
            cout << "   " << customer << " joined the line" << endl;
            names.pop_front();
        }

        if (!line.is_empty() && (rand() % 100 < 20)) {
            cout << "   " << line.back() << " (at the rear) left the line" << endl;
            line.pop_back();
        }

        if (!names.is_empty() && (rand() % 100 < 10)) {
            string customer = names.front();
            cout <<  "   " << customer << " (VIP) joins the front of the line" << endl;
            line.push_back(customer);
            names.pop_front();
        }

        cout << "   Resulting line:" << endl;
        line.print();
    }

    return 0;
}
