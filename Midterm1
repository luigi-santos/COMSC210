#include <iostream> // the iostream library
using namespace std;

const int MIN_NR = 10, MAX_NR = 99, MIN_LS = 5, MAX_LS = 20; // constants for Max and min for numbers and the list sizes

class DoublyLinkedList { // a class for the doubly linked lists
private:
    struct Node { // structure for node in the doubly linked list
        int data; // holds value for the node
        Node* prev; // pointer for previous node in the list
        Node* next; // pointer for the next node in the list
        Node(int val, Node* p = nullptr, Node* n = nullptr) { // constructor that initializes value for node and possible previous and/or next pointers
            data = val; // sets data value to the value
            prev = p; // sets previous pointer to nullptr
            next = n; // sets next pointer to nullputr
        }
    };

    Node* head; // pointer for the first node
    Node* tail; // pointer to the lat node

public:
    DoublyLinkedList() { head = nullptr; tail = nullptr; } // constructor for the class

    void insert_after(int value, int position) { // function that inserts a new node with a value
        if (position < 0) { // if statement is true
            cout << "Position must be >= 0." << endl; // print statement
            return; // exits function
        }

        Node* newNode = new Node(value); // creates new node with the value
        if (!head) { // if there is nothing
            head = tail = newNode; // make head and tail set to the new node
            return; // exits function
        }

        Node* temp = head; // begin at the head of the list
        for (int i = 0; i < position && temp; ++i) // for every i in this position
            temp = temp->next; // move to the next node

        if (!temp) { // if position goes past list
            cout << "Position exceeds list size. Node not inserted.\n"; // print statement
            delete newNode; // deletes the new node
            return; // exits function
        }

        newNode->next = temp->next; // put new node after temp node
        newNode->prev = temp; // set new node's next to the temp node's next
        if (temp->next)
            temp->next->prev = newNode; // if the temp has a next node set its previous to the new node
        else
            tail = newNode; // if it's the tail, make the tail the new node
        temp->next = newNode; // set the temp's next to new node
    }

    void delete_val(int value) { // function for deleting first node with a value
        if (!head) return; // if list is empty exit function

        Node* temp = head; // begin at the head of list
        
        while (temp && temp->data != value)
            temp = temp->next; // when temp is not the value move to next node

        if (!temp) return; // if theres no value exit function

        if (temp->prev)
            temp->prev->next = temp->next; // if the node is not the first delete next node 
        else
            head = temp->next; // if it is the first node make it the head

        if (temp->next)
            temp->next->prev = temp->prev; // if temp is not the last node delete next node
        else
            tail = temp->prev; // if it is last node make it the tail

        delete temp; // deletes node
    }

    void delete_pos(int pos) {  // function that deletes node at a position
        if (!head) {
            cout << "List is empty." << endl; // if list is empty print message
            return; // exit function
        }
    
        if (pos == 1) { 
            pop_front(); // if the first node is being deleted, call pop_front()
            return; // exit function
        }
    
        Node* temp = head; // begin at the head of list
    
        for (int i = 1; i < pos; i++){ // for every i in this position
            if (!temp) {
                cout << "Position doesn't exist." << endl; // if the position goes past list size print message
                return; // exit function
            }
            else
                temp = temp->next; // if not move on to next node
        }
        if (!temp) { 
            cout << "Position doesn't exist." << endl; // if the position doesn't exist print message
            return; // print message
        }
    
        if (!temp->next) {
            pop_back(); // if the last node is being deleted call pop_back()
            return; // exit function
        }
    
        Node* tempPrev = temp->prev; // gets the previous node
        tempPrev->next = temp->next; 
        temp->next->prev = tempPrev; // moves on to next node to be deleted
        delete temp; deletes temp
    }

    void push_back(int v) { // function that adds a new node with a value to the tail
        Node* newNode = new Node(v); // makes new node with a value
        if (!tail) 
            head = tail = newNode; // if the list is empty make the head and tail set to the new node
        else {
            tail->next = newNode; 
            newNode->prev = tail;
            tail = newNode; //  if not make tail the new node
        }
    }
    
    void push_front(int v) { // function that adds a new node with a value at the head of the list
        Node* newNode = new Node(v); makes new node with a value
        if (!head)
            head = tail = newNode; // if the list is empty make the head and tail set to the new node
        else {
            newNode->next = head; 
            head->prev = newNode;
            head = newNode;// if not make the new node's next the head of the list
        }
    }
    
    void pop_front() { // function that removes first node

        if (!head) {
            cout << "List is empty." << endl; // if list is empty print message
            return; // exit function
        }

        Node * temp = head; // stores the temp head

        if (head->next) {
            head = head->next;
            head->prev = nullptr; // if theres more than one node move the head to the next node and set previous to nullptr
        }
        else
            head = tail = nullptr; // if theres only one node set head and tail to nullptr
        delete temp; // deletes temp head
    }

    void pop_back() { // function that removes last node
        if (!tail) {
            cout << "List is empty." << endl; // if list is empty print message
            return; // exit function
        }
        Node * temp = tail; // stores the temp tail

        if (tail->prev) {
            tail = tail->prev;
            tail->next = nullptr; // if theres more than one node move the htail to the prev node and set next to nullptr
        }
        else
            head = tail = nullptr; // if theres only one node set head and tail to nullptr
        delete temp; // delete temp prev
    }

    ~DoublyLinkedList() { // destructor
        while (head) { 
            Node* temp = head;
            head = head->next; // while there are nodes in the list, store temp head and move the head to the next node
            delete temp; // delete temp head
        }
    }
    void print() { // function that prints head to tail
        Node* current = head; // begin at the head
        if (!current) {
            cout << "List is empty." << endl; // if list is empty print message
            return; // exit function
        }
        while (current) {
            cout << current->data << " "; // print the current node's data with a space
            current = current->next; // move to next node
        }
        cout << endl; // endline
    }

    void print_reverse() { // function that prints tail to head
        Node* current = tail; // begin at tail
        if (!current) { 
            cout << "List is empty." << endl; // if list is empty print message
            return; // exit message
        }
        while (current) {
            cout << current->data << " "; // print current node's data with spaces
            current = current->prev; // move to previous node
        }
        cout << endl; // endline
    }
};

int main() { // driver program
    cout << MIN_NR + MIN_LS + MAX_NR + MAX_LS;  // dummy statement to avoid compiler warning

    
    return 0; // exit program
}
