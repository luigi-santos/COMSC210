#include <iostream>
using namespace std;

const int NAME_COUNT = 15;
const int COLOR_COUNT = 15;

class Goat {
private:
    int age;
    string name;
    string color;
    static string names[NAME_COUNT];
    static string colors[COLOR_COUNT];


public:
    Goat() {
        age = rand() % 20 + 1;
        name = names[rand() % NAME_COUNT];
        color = colors [rand() % COLOR_COUNT];
    }

    Goat (int a, string n, string c) : age(a), name(n), color(c) {}

    void print() const {
        cout << name << " (" << color << ", " << age << ")";
    }
};

string Goat::names[NAME_COUNT] = {
    "Bobby", "Daisy", "Nanny", "Billy", "Luna", 
    "Goaty", "Clover", "Shadow", "Pumpkin", "Ginger", 
    "Misty", "Whisper", "Tilly", "Lilly", "Fluffy"
};

string Goat::colors[COLOR_COUNT] = {
    "Brown", "White", "Black", "Gray", "Spotted", 
    "Golden", "Cream", "Chestnut", "Mauve", "Yellow", 
    "Red", "Pink", "Purple", "Blue", "Green"
};

class DoublyLinkedList {
private:
    struct Node {
        Goat data;
        Node* prev;
        Node* next;
        Node(Goat val, Node* p = nullptr, Node* n = nullptr) : data(val), prev(p), next(n) {}
    };

    Node* head;
    Node* tail;

public:
    // constructor
    DoublyLinkedList() : head(nullptr), tail(nullptr) {}

    void push_back(const Goat& value) {
        Node* newNode = new Node(value);
        if (!tail) { // if there's no tail, the list is empty
            head = tail = newNode;
        } else {
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
    }

    void push_front(const Goat& value) {
        Node* newNode = new Node(value);
        if (!head) {  // if there's no head, the list is empty
            head = tail = newNode;
        } else {
            newNode->next = head;
            head->prev = newNode;
            head = newNode;
        }
    }

    void print() {
        if (!head) {
            cout << "list is empty" << endl;
            return;
        }
        Node* current = head;
        while (current) {
            current->data.print();
            cout << endl;
            current = current->next;
        }
    }

    void print_reverse() {
        if (!tail) {
            cout << "list is empty" << endl;
            return;
        }
        Node* current = tail;
        while (current) {
            current->data.print();
            cout << endl;
            current = current->prev;
        }
    }

    ~DoublyLinkedList() {
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }
};

// Driver program
int main() {
    srand(static_cast<unsigned>(time(0)));

    DoublyLinkedList list;
    int size = rand() % 16 + 5;

    for (int i = 0; i < size; ++i) {
        list.push_back(Goat());
    }

    cout << "List forward: ";
    list.print();

    cout << "List backward: ";
    list.print_reverse();

    return 0;
}
